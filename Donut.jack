/**
 * Donut AKA Torus
 */
class Donut {
  // Half width and half height of the screen
  field int halfWidth, halfHeight;
  // Cross section radius
  field int radius1;
  // Donut radius
  field int radius2;
  // Donut scale
  field int scale;
  // Distance from the viewer
  field int distance;
  // Rotation angles
  field int a, b;
  // Sin and cos of the rotation angles
  field int sa, ca, sb, cb;
  // Sine and cosine tables
  field Array sin, cos;
  // Size of the trig tables
  field int trigSize;
  // Trig scale factor
  field int s;
  // Luminance scale
  field int lumScale;

  /** Constructs a new donut. */
  constructor Donut new() {
    // These values are chosen to fit the Hack screen.
    let radius1 = 8;
    let radius2 = 16;
    let scale = 216;
    let distance = 48;
    let a = 24;
    let b = 56;
    let halfWidth = 256;
    let halfHeight = 128;
    let lumScale = 5;
    let trigSize = Trig.size();
    let s = Trig.scale();
    let cos = Trig.cos();
    let sin = Trig.sin();
    let sa = sin[a];
    let ca = cos[a];
    let sb = sin[b];
    let cb = cos[b];

    return this;
  }

  /** Rotates the donut around X axis. */
  method void rotateX(int delta) {
    let a = Trig.clamp(a + delta);
    let sa = sin[a];
    let ca = cos[a];
    return;
  }

  /** Rotates the donut around Y axis. */
  method void rotateY(int delta) {
    let b = Trig.clamp(b + delta);
    let sb = sin[b];
    let cb = cos[b];
    return;
  }

  /** Renders the donut. */
  method void draw() {
    // Real coordinates
    var int x, y, z;
    // Projected coordinates
    var int xp, yp;
    // Rotation angles to build the donut
    var int theta, phi;
    // Luminance
    var int lum;
    // Intermediate results
    var int circleX, circleY;
    var int sTheta, cTheta, sPhi, cPhi;
    var int t1, t2, t3;

    do Screen.clearScreen();

    let theta = 0;
    while (theta < trigSize) {
      let phi = 0;
      while (phi < trigSize) {
        let sTheta = sin[theta];
        let cTheta = cos[theta];
        let sPhi = sin[phi];
        let cPhi = cos[phi];
        let circleX = radius2 + ((radius1 * cTheta) / s);
        let circleY = (radius1 * sTheta) / s;
        let t1 = sa * sPhi / s;
        let t2 = circleY * ca / s;
        let t3 = circleX * ca / s;
        let x = ((circleX * ((cb * cPhi) + (t1 * sb)) / s) - (t2 * sb)) / s;
        let y = ((circleX * ((sb * cPhi) - (t1 * cb)) / s) + (t2 * cb)) / s;
        let z = distance + (((t3 * sPhi) + (circleY * sa)) / s);
        if (z > 0) {
          let xp = halfWidth  + (scale * x / z);
          let yp = halfHeight - (scale * y / z);

          let lum = lumScale * (
            (cPhi * cTheta * sb / s)
            - (ca * cTheta * sPhi / s)
            - (sa * sTheta)
            + (cb * ((ca * sTheta) - (cTheta * t1)) / s)
          ) / s / s;

          do Donut.drawPoint(xp, yp, lum);
        }
        let phi = phi + 1;
      }
      let theta = theta + 2;
    }
    return;
  }

  /** Draws a point of size proportional to the given luminance. */
  function void drawPoint(int x, int y, int lum) {
    if (lum > -2) {
      do Screen.drawPixel(x, y);
    }
    if (lum > -1) {
      do Screen.drawPixel(x-1, y);
      do Screen.drawPixel(x+1, y);
    }
    if (lum > 2) {
      do Screen.drawPixel(x, y+1);
      do Screen.drawPixel(x, y-1);
    }
    if (lum > 3) {
      do Screen.drawPixel(x-1, y-1);
      do Screen.drawPixel(x+1, y+1);
    }
    if (lum > 5) {
      do Screen.drawPixel(x-1, y+1);
      do Screen.drawPixel(x+1, y-1);
    }
    return;
  }

  /** Disposes this donut. */
  method void dispose() {
    do Memory.deAlloc(this);
    return;
  }
}
